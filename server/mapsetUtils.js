const seedrandom = require('seedrandom');

const times = [[1,1191707191000],[101,1192895097000],[1004,1206750680000],[4555,1230865533000],[6725,1240943085000],[9056,1252019177000],[11513,1261353593000],[14075,1269001506000],[16726,1275962189000],[19454,1282273175000],[22251,1289102139000],[25110,1295646920000],[28026,1301191106000],[30994,1306670075000],[52944,1340019863000],[56220,1343929356000],[59526,1348045206000],[83408,1363462790000],[119351,1380389504000],[134218,1386889725000],[137973,1388317276000],[153137,1393322280000],[160802,1396033579000],[176285,1400383467000],[203839,1408303986000],[227879,1414660315000],[293648,1426362390000],[297831,1427501921000],[318865,1433126236000],[323095,1434204232000],[327332,1435338665000],[352907,1441488345000],[365789,1444917174000],[374411,1446923691000],[387393,1449516992000],[400433,1451859141000],[409158,1453747666000],[435480,1459172282000],[439888,1460094366000],[453145,1462659177000],[462012,1464559079000],[466454,1465475824000],[475354,1467218378000],[497699,1471585430000],[502184,1472438857000],[511169,1474410444000],[533723,1479217273000],[538249,1480188406000],[547316,1482146833000],[570066,1486600054000],[579199,1488241071000],[583773,1489179721000],[592934,1490941853000],[597521,1491812294000],[602113,1492648936000],[606709,1493542471000],[611310,1494448050000],[643639,1500771673000],[648275,1501689751000],[657559,1503331718000],[662207,1504131150000],[676178,1506913817000],[680843,1507903997000],[685512,1508821165000],[699543,1511903373000],[704228,1512934608000],[708917,1513910146000],[713610,1514745514000],[737134,1518998114000],[741850,1519831288000],[760753,1522986603000],[765488,1523805669000],[774970,1525335409000],[784466,1526852099000],[793977,1528339265000],[803502,1529858583000],[817816,1532193452000],[822594,1532875139000],[836950,1534988859000],[846538,1536529770000],[870568,1540765989000],[875384,1541591950000],[880203,1542435724000],[889852,1544138549000],[899514,1545839055000],[904350,1546466154000],[909189,1547249292000],[918876,1548894147000],[928577,1550593494000],[933432,1551489428000],[938290,1552259361000],[948015,1553969388000],[952883,1554763016000],[957754,1555559990000],[962628,1556331913000],[967505,1557144425000],[972385,1558019897000],[977268,1558831258000],[982154,1559644795000],[987043,1560492223000],[996830,1562081224000],[1006629,1563673126000],[1011533,1564480324000],[1021350,1565925543000],[1036098,1568312067000],[1065670,1573798247000],[1070609,1574790519000],[1075551,1575752130000],[1080495,1576718180000],[1090392,1578384681000],[1095345,1579261313000],[1105259,1580989068000],[1115184,1582605281000],[1120151,1583463300000],[1135067,1585462050000],[1140044,1586040616000],[1145024,1586547465000],[1159980,1588265239000],[1179959,1590604733000],[1199979,1593015209000],[1204990,1593647630000],[1210004,1594293519000],[1215021,1594899381000],[1220040,1595493903000],[1225062,1596099974000],[1235113,1597327037000],[1245174,1598524642000],[1250208,1599140830000],[1255245,1599781764000],[1265326,1601042446000],[1270370,1601679654000],[1290571,1604199462000],[1295627,1604805196000],[1315877,1607136984000],[1326016,1608294920000],[1346322,1610470879000],[1351404,1611009591000],[1356489,1611534143000],[1366665,1612540905000],[1387046,1614445169000],[1397250,1615338812000],[1412573,1616709136000],[1422800,1617585081000],[1427917,1618038032000],[1433036,1618502498000],[1438157,1618955492000],[1448406,1619833662000],[1468930,1621634776000],[1474067,1622050366000],[1479206,1622490307000],[1484347,1622961936000],[1499782,1624425426000],[1504932,1624914288000],[1515238,1625862442000],[1520394,1626342154000],[1541038,1628240604000],[1546204,1628700674000],[1566892,1630610913000],[1577248,1631681826000],[1587612,1632711764000],[1592797,1633256634000],[1603173,1634395534000],[1618752,1636006222000],[1623949,1636585953000],[1629148,1637123606000],[1634349,1637674598000],[1644757,1638811724000],[1649964,1639429043000],[1656675,1640215997000]]

/**
 * estimate what time mapset with id was created
 * used as sort of an estimation proxy for distribution of ranked
 * sets, for lack of a better method
 * @param {number} id 
 * @returns Date object
 */
const getTime = (id) => {
  if (id === 1) return times[0][1]
  // requires id between 1 and max_id
  let i;
  for (i = 0; id > times[i][0]; i++);
  const a = times[i][0] - id, b = id - times[i-1][0];
  const time = (a * times[i-1][1] + b * times[i][1]) / (a+b);
  return new Date(Math.round(time));
}

const makeRng = (seed) => seedrandom(seed);

// randrange [min, max)
const random = (rng) => (min, max) => Math.floor(rng() * (max - min)) + min; 

/**
 * @param {Array} x 
 * @returns a random element from x
 */
const randomChoice = (rng) => (x) => x[random(rng)(0, x.length)];

const weightedRandomChoice = (rng) => (arr, weights) => {
  // arr and weights have the same length
  const totalWeight = weights.reduce((a,b) => a+b, 0);
  const val = random(rng)(0, totalWeight);
  let i = 0;
  for (let weight = 0; val >= weight; i++) weight += weights[i];
  return arr[i-1];
}

module.exports = {
  getTime,
  makeRng,
  random,
  randomChoice,
  weightedRandomChoice,
}